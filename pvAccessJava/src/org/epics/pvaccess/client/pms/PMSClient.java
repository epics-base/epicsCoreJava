package org.epics.pvaccess.client.pms;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.epics.pvaccess.PVAConstants;
import org.epics.pvaccess.impl.remote.SerializationHelper;
import org.epics.pvdata.factory.FieldFactory;
import org.epics.pvdata.factory.PVDataFactory;
import org.epics.pvdata.misc.SerializeHelper;
import org.epics.pvdata.pv.DeserializableControl;
import org.epics.pvdata.pv.Field;
import org.epics.pvdata.pv.PVByteArray;
import org.epics.pvdata.pv.PVDataCreate;
import org.epics.pvdata.pv.PVField;
import org.epics.pvdata.pv.PVStructure;
import org.epics.pvdata.pv.ScalarType;
import org.epics.pvdata.pv.SerializableControl;
import org.epics.pvdata.pv.Structure;

public class PMSClient {

	static class PMSSubscriber extends PMSCodec implements DeserializableControl
	{
		private static PVDataCreate pvDataCreate = PVDataFactory.getPVDataCreate();

		private final MulticastSocket socket;
		private final DatagramPacket packet;

		private final ByteBuffer buffer = ByteBuffer.allocate(PVAConstants.MAX_UDP_PACKET);

		private IncomingMulticastIntrospectionRegistry activeRegistry = null;
		
		// TODO clear!!! removed if not used for certain period of time
		private final Map<PublisherInfo, IncomingMulticastIntrospectionRegistry> publishers =
			new HashMap<PublisherInfo, IncomingMulticastIntrospectionRegistry>();

		private static class PublisherInfo
		{
			public long id;
			public InetSocketAddress socketAddress;
			
			/**
			 * @param id
			 * @param socketAddress
			 */
			public void set(long id, InetSocketAddress socketAddress) {
				this.id = id;
				this.socketAddress = socketAddress;
			}

			@Override
			public int hashCode() {
				return (int)id;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj)
					return true;
				if (obj == null)
					return false;
				if (getClass() != obj.getClass())
					return false;
				PublisherInfo other = (PublisherInfo) obj;
				if (id != other.id)
					return false;
				if (socketAddress == null) {
					if (other.socketAddress != null)
						return false;
				} else if (!socketAddress.equals(other.socketAddress))
					return false;
				return true;
			}
			
			
		}
		
		/**
		 * Incoming (codes generated by other party) introspection registry.
		 */

		public PMSSubscriber(InetAddress address, int port) throws IOException
		{
			socket = new MulticastSocket(port);
			socket.joinGroup(address);

			packet = new DatagramPacket(buffer.array(), buffer.capacity());
		}
		
		@Override
		public void ensureData(int size) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void alignData(int alignment) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public Field cachedDeserialize(ByteBuffer buffer) {
			return activeRegistry.deserialize(buffer, this);
		}

		
		private PublisherInfo cachedPI = new PublisherInfo();

		public PVField receive(PVField data) throws IOException
		{
			while (true)
			{
		
				socket.receive(packet);
				
				InetSocketAddress socketAddress = (InetSocketAddress)packet.getSocketAddress();
				
				buffer.clear();
				buffer.limit(packet.getLength());
	
				int t = buffer.getInt();
				
				// messageSeqNumber (data) of additionalInfo (control)
				int t2 = buffer.getInt();
	
				// id (timestamp in ms), also destinationSocketID (for multiplexing)
				long id = buffer.getLong();
				
	
				int seqNum = t & 0x7FFFFFFF;
				
				// control packet
				if (t != seqNum)
				{
					handleControlPacket(buffer, socketAddress, t, t2, id);
					continue;
				}	
	
				//final int messageSeqNumber = t & 0x1FFFFFFF;
	
				// 10 - first packet of a message (0x80000000)
				// 01 - last packet of a message (0x40000000)
				// 11 - solo message packet (0xC0000000)
				// 00 - packet in the middle of a message (0xC0000000)
				final int positionFlags = t2 & 0xC0000000;
				if (positionFlags != PacketPosition.SOLO.getMaskValue())
				{
					// we support only solo-s for now
					return null; // TODO
				}
				
				
				// 0 (in order delivery not required) / 1 (in order delivery required) of messages
				//final int inOrderDeliveryRequiredFlag = t2 & 0x20000000;

				cachedPI.set(id, socketAddress);
				activeRegistry = publishers.get(cachedPI);
				if (activeRegistry == null)
				{
					activeRegistry = new IncomingMulticastIntrospectionRegistry();
					publishers.put(cachedPI, activeRegistry);
					cachedPI = new PublisherInfo();
				}
				
				String topicId = SerializeHelper.deserializeString(buffer, this);
				System.out.println(topicId);
				
				final Field field = this.cachedDeserialize(buffer);
				if (field == null)
					return null;
				else
				{
					// create new PVField or reuse
					if (data == null || !data.getField().equals(field))
						data = pvDataCreate.createPVField(field);
	
					data.deserialize(buffer, this);
					
					return data;
				}
			}
		}
	}
	
	static class PMSPublisher extends PMSCodec implements SerializableControl
	{
		
		private final DatagramSocket socket;
		private final DatagramPacket packet;
		
		private final ByteBuffer buffer = ByteBuffer.allocate(PVAConstants.MAX_UDP_PACKET);
		

		/**
		 * Outgoing (codes generated by this party) introspection registry that
		 * always serializes with FULL_WITH_ID_TYPE_CODE.
		 */
		private final OutgoingMulticastIntrospectionRegistry outgoingIR = new OutgoingMulticastIntrospectionRegistry();
		
		public PMSPublisher(InetAddress sendAddress, int port) throws SocketException
		{
			socket = new DatagramSocket();
			packet = new DatagramPacket(buffer.array(), 0, sendAddress, port);
		}
		
		@Override
		public void flushSerializeBuffer() {
			// TODO Auto-generated method stub
		}

		@Override
		public void ensureBuffer(int size) {
			/*
			if (sendBuffer.remaining() >= size)
				return;
			
			// too large for buffer...
			if (maxSendPayloadSize < size)
				throw new IllegalArgumentException("requested for buffer size " + size + ", but only " + maxSendPayloadSize + " available.");
			
			while (sendBuffer.remaining() < size)
				flush(false);
				*/
		}

		/*
		public void flush(boolean lastMessageCompleted) {
			// automatic end
			endMessage(!lastMessageCompleted);
			
			sendBuffer.flip();
			
			try {
				send(sendBuffer);
			} catch (IOException e) {
				try {
					if (isOpen())
						close();
				} catch (IOException iex) {
					// noop, best-effort close
				}
				throw new ConnectionClosedException("Failed to send buffer.", e);
			}
			
			sendBuffer.clear();

			lastMessageStartPosition = -1;

			// start with last header
			if (!lastMessageCompleted && lastSegmentedMessageType != 0)
				startMessage(lastSegmentedMessageCommand, 0);
		}
				*/

		
		@Override
		public void alignBuffer(int alignment) {
			// TODO Auto-generated method stub
		}

		@Override
		public void cachedSerialize(Field field, ByteBuffer buffer) {
			outgoingIR.serialize(field, buffer, this);
		}
			
		
		
		protected synchronized void sendShutdownControlMessage() throws IOException
		{
			buffer.clear();
			
			pmsShutdownControlMessage(buffer);
			
			packet.setLength(buffer.position());
			
			socket.send(packet);
		}
		
		protected synchronized void sendKeepAliveControlMessage(int expirationTimeSec) throws IOException
		{
			buffer.clear();
			
			pmsKeepAliveControlMessage(buffer, expirationTimeSec);
			
			packet.setLength(buffer.position());
			
			socket.send(packet);
		}

		protected synchronized void sendSubscribeControlMessage(String topicID, int expirationTimeSec) throws IOException
		{
			buffer.clear();
			
			pmsSubscribeControlMessage(buffer, expirationTimeSec, topicID);

			packet.setLength(buffer.position());
			
			socket.send(packet);
		}

		private void pmsDataMessage(ByteBuffer buffer, String topicId, PVField data)
		{
			int messageSeqNo = incrementMessageSeqNum();
			
			udtDataHeader(buffer, messageSeqNo, PacketPosition.SOLO);
			
			SerializeHelper.serializeString(topicId, buffer, this); 
			
			if (data == null)
				SerializationHelper.serializeNullField(buffer, this);
			else
			{
				this.cachedSerialize(data.getField(), buffer);
				data.serialize(buffer, this);
			}
		}

		public synchronized void sendData(String topicId, PVField data) throws IOException
		{
			buffer.clear();
			
			pmsDataMessage(buffer, topicId, data);
			
			packet.setLength(buffer.position());
			
			socket.send(packet);
		}

	}

	
	
	
	
	public static final Structure scanStructure =
		FieldFactory.getFieldCreate().createFieldBuilder().
			add("scanId", ScalarType.pvInt).
			add("frameSeq", ScalarType.pvInt).	// frame sequence number
			add("fps", ScalarType.pvInt).		// frames per scan
			addArray("data", ScalarType.pvByte).
			createStructure();

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Throwable
	{
		final InetAddress address = InetAddress.getByName("224.0.0.1");
		final int port = 5678;
		
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				try
				{
					PMSSubscriber sub = new PMSSubscriber(address, port);
					PVField data = null;
					while (true)
					{
						data = sub.receive(data);

						System.out.println(data);
						System.out.println("-------");
					}
				} catch (Throwable th) {
					th.printStackTrace();
				}
			}
		}, "receiver-thread").start();
		
		
		// 8000 frames per scan
		final int FRAMES_PER_SCAN = 3; //8000;
		// 1K data per frame
		final int FRAME_DATA_SIZE = 1024;
		
		// create data structure
		PVStructure data = PVDataFactory.getPVDataCreate().
								createPVStructure(scanStructure);
		
		//
		// set static data
		//
		data.getIntField("fps").put(FRAMES_PER_SCAN);
		byte[] dataArray = new byte[FRAME_DATA_SIZE];
		PVByteArray ba = (PVByteArray)data.getScalarArrayField("data", ScalarType.pvByte);
		ba.shareData(dataArray);
		
		PMSPublisher sender = new PMSPublisher(address, port);

		//
		// generation of 1Hz scans
		//
		
		int scanId = 0;
		while (true)
		{
			for (int frameSeq = 0; frameSeq < FRAMES_PER_SCAN; frameSeq++)
			{
				// NOTE: field references could be cached

				data.getIntField("scanId").put(scanId);
				data.getIntField("frameSeq").put(frameSeq);
				
				// gen some data
				Arrays.fill(dataArray, (byte)(frameSeq % 255));
				
				sender.sendData("detector01", data);
			}
			
			Thread.sleep(1000);
			
			// increment scan id
			scanId++;
		}
	}

}
