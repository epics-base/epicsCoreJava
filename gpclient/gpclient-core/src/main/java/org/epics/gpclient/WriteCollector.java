/*
 * Copyright information and license terms for this software can be
 * found in the file LICENSE.TXT included with the distribution.
 */
package org.epics.gpclient;

import org.epics.util.compat.legacy.functional.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.epics.gpclient.datasource.DataSource;
import org.epics.util.compat.legacy.lang.Optional;

/**
 *
 * The component that collects the incoming/outgoing notifications for each channel.
 * <p>
 * This class is the write counterpart of the {@link ReadCollector}. It sits between
 * the channel sources (i.e. datasources, services, ...), which dispatch
 * notifications at the source rate, and the gpclient, which dispatches notifications
 * at the desired rate. It is used by the implementation of a set of channel
 * to create the write functionality. It allows the channel implementation
 * to receive write requests and to notify connection changes and errors.
 * <p>
 * Most users will not use this class directly, even when implementing a
 * {@link DataSource}. It is part of the public API to allow ad-hoc processing
 * patterns of data that do not fit the construct provided. The communication
 * between the {@code WriteCollector} and the gpclient, instead, is deliberately
 * not exposed through the public API.
 *
 * @author carcassi
 */
public class WriteCollector<T> {

    private static final Logger log = Logger.getLogger(WriteCollector.class.getName());

    /**
     * A request to write a particular value to a channel.
     * <p>
     * To perform the write, use {@link WriteRequest#getValue() } to take the
     * value to write, and respond with either {@link WriteRequest#writeSuccessful() }
     * or {@link WriteRequest#writeFailed(java.lang.Exception) }.
     *
     * @param <T> the type of data to be written
     */
    public static class WriteRequest<T> {
        private final T value;
        private final Consumer<PVEvent> writeCallback;
        private volatile boolean responseSent = false;

        WriteRequest(T value, Consumer<PVEvent> writeCallback) {
            this.value = value;
            this.writeCallback = writeCallback;
        }

        /**
         * The value to be written.
         *
         * @return the value to be written, can be null
         */
        public T getValue() {
            return value;
        }

        /**
         * Notify that the write was successfully completed.
         */
        public void writeSuccessful() {
            if (responseSent) {
                log.log(Level.SEVERE, "Multiple response for the same write", new RuntimeException("Multiple response for the same write"));
            }
            writeCallback.accept(PVEvent.writeSucceededEvent());
            responseSent = true;
        }

        /**
         * Notify that the write was not completed or that it completed with
         * an error.
         * <p>
         * Note that the exception is propagated to the user layer of the gpclient,
         * therefore the error message should be meaningful.
         *
         * @param writeError the error associated with the response
         */
        public void writeFailed(Exception writeError) {
            if (responseSent) {
                log.log(Level.SEVERE, "Multiple response for the same write", new RuntimeException("Multiple response for the same write"));
            }
            writeCallback.accept(PVEvent.writeFailedEvent(writeError));
            responseSent = true;
        }
    }

    // Lock policy. In general, the WriteCollector is where handoff between
    // channel source threads and gpclient threads happened, so it needs to be
    // made thread-safe
    private final Object lock = new Object();

    // The data that needs to be sent back and forth needs the lock
    private boolean connection = false;
    private Optional<T> value;
    private Integer writeId;

    // As the WriteCollector is created before the gpclient and the channel
    // implementation, the listeners must be set afterwards and therefore
    // must be accesssed throught the lock
    private Consumer<PVEvent> collectorListener;
    private Consumer<WriteRequest<?>> writeListener;

    private final Consumer<T> writeFunction = new Consumer<T>() {
        @Override
        public void accept(T t) {
            queueValue(t);
        }
    };

    WriteCollector() {
    }

    /**
     * The write function for the values. This is the end of all write
     * expressions.
     *
     * @return the write function; can't be null
     */
    Consumer<T> getWriteFunction() {
        return writeFunction;
    }

    /**
     * The current write connection state.
     *
     * @return the current connection state
     */
    boolean getConnection() {
        synchronized(lock) {
            return connection;
        }
    }

    /**
     * Sets the listener for the events generated by the channel source. Apart
     * from unit tests, the {@link PVDirector} is the one that receives the
     * events. Changing it to null effectively deregisteres the listener.
     *
     * @param collectorListener the new listeners; can be null
     */
    void setUpdateListener(Consumer<PVEvent>  collectorListener) {
        synchronized (lock) {
            this.collectorListener = collectorListener;
        }
    }

    /**
     * Sets the listener for the write request. The listener will be in charge
     * of executing the write requests and concluding each by using the appropriate
     * method on the write request. The response must be given on the associated
     * request so that the framework can keep track of which particular write
     * was successful and which was not.
     * <p>
     * Setting this to null effectively deregisters the listener.
     *
     * @param writeListener the object responsible to carry out the write requests; can be null
     */
    public void setWriteNotification(Consumer<WriteRequest<?>> writeListener) {
        synchronized (lock) {
            this.writeListener = writeListener;
        }
    }

    /*
    The design of the communication between the PVDirector and thw WriteCollector
    is fully detailed in WriteCollector#submitWrite.
    */

    /**
     * Informs the WriteCollector that it will receive a value to write and that
     * it should be associated with the given write id. This method cannot be
     * called again unless a {@link #sendWriteRequest(int, Consumer) }
     * or {@link #cancelWrite(int) } have been called.
     *
     * @param writeId the write id for the next write
     */
    void prepareWrite(int writeId) {
        synchronized(lock) {
            if (this.writeId != null) {
                throw new IllegalStateException("Asked to prepare for writeId " + writeId + " while haven't submitted request for " + this.writeId);
            } else {
                this.writeId = writeId;
            }
        }
    }

    /**
     * Associates the given value with the currently prepared write id.
     * This method can only be called once after each {@link #prepareWrite(int) }.
     *
     * @param newValue the value to write; can be null
     */
    void queueValue(T newValue) {
        synchronized(lock) {
            if (this.writeId == null) {
                throw new IllegalStateException("Received unexpected value to write");
            } else {
                this.value = Optional.ofNullable(newValue);
            }
        }
    }

    /**
     * Instructs the WriteCollector to the write request. This method can only be
     * called after {@link #prepareWrite(int) } and {@link #queueValue(java.lang.Object) }
     * have been called.
     *
     * @param writeId the id for the write request
     * @param writeCallback the callback for this request
     */
    void sendWriteRequest(int writeId, Consumer<PVEvent> writeCallback) {
        Consumer<WriteRequest<?>> listener;
        WriteRequest<T> request;
        synchronized (lock) {
            if (this.writeId == null) {
                throw new IllegalStateException("Received unexpected send write request");
            }
            if (this.value != null) {
                request = new WriteRequest<T>(this.value.orElse(null), writeCallback);
            } else {
                request = null;
            }
            listener = writeListener;
            this.writeId = null;
            this.value = null;
        }
        // If no value was sent to be written, return successful
        if (request == null) {
            new WriteRequest<T>(null, writeCallback).writeSuccessful();
            return;
        }

        // Run the task without holding the lock
        if (listener != null) {
            listener.accept(request);
        } else {
            request.writeFailed(new RuntimeException("No channel implementation is registered to process write for value " + request.getValue()));
        }
    }

    /**
     * Instructs the WriteCollector to dismiss the current write request and
     * associated value. This method can only be called after {@link #prepareWrite(int) }
     *
     * @param writeId the write request id
     */
    void cancelWrite(int writeId) {
        synchronized(lock) {
            if (((Integer) writeId).equals(this.writeId)) {
                this.writeId = null;
                this.value = null;
            } else {
                throw new IllegalStateException("Received unexpected cancel write");
            }
        }
    }

    /**
     * Update the connection state. The channel source implementation can use
     * this method to tell the gpclient that the ability to write to the channel
     * has changed.
     *
     * @param newConnection the new connection state
     */
    public void updateConnection(boolean newConnection) {
        Consumer<PVEvent> listener;
        synchronized (lock) {
            connection = newConnection;
            listener = collectorListener;
        }
        // Run the task without holding the lock
        if (listener != null) {
            listener.accept(PVEvent.writeConnectionEvent());
        }
    }

    /**
     * Notify an error - DO NOT USE THIS METHOD FOR WRITE FAILURE. The channel
     * source implementation can use this method to tell the gpclient that an
     * error has occurred that may make the channel not work correctly. Errors
     * that prevented the execution of a particular write, however, should be
     * notified through {@link WriteRequest#writeFailed(java.lang.Exception) }.
     *
     * @param error the error to notify; can't be null
     */
    public void notifyError(Exception error) {
        if (error == null) {
            throw new IllegalArgumentException("The error to notify can't be null");
        }

        Consumer<PVEvent> listener;
        synchronized (lock) {
            listener = collectorListener;
        }
        // Run the task without holding the lock
        if (listener != null) {
            listener.accept(PVEvent.exceptionEvent(error));
        }
    }

}
